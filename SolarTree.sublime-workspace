{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cent",
				"centers_right"
			],
			[
				"new",
				"new_angle2"
			],
			[
				"new_ang",
				"new_angle1"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Parameters.py",
			"settings":
			{
				"buffer_size": 475,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PinMaster.py",
			"settings":
			{
				"buffer_size": 378,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Sensor.py",
			"settings":
			{
				"buffer_size": 3096,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Move.py",
			"settings":
			{
				"buffer_size": 3337,
				"line_ending": "Unix"
			}
		},
		{
			"file": "brain.py",
			"settings":
			{
				"buffer_size": 3263,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# Author: Hugo P.\n# Project: https://github.com/HugoCMU/SolarTree\n# Description: Program uses the sensors to determine best sequence of moves for robot to execute.\n\nfrom brain import ser, params, sensors\nfrom motor import Motor\nfrom Buzzer import Buzzer\nfrom Move import Move\nimport time\n\nimport numpy as np\nimport numpy.linalg as la\n\ndef navigate():\n	'''\n		Function will call exploration() function to move robot, but will keep\n		track of previous moves\n	'''\n\n	# Test output\n	print \"Navigating ...\"\n\n	# Beep to indicate begining of navigate step\n	buzzer = Buzzer()\n	buzzer.play(4)\n\n	# Create motor object\n	motor = Motor()\n\n	try:\n		# Enter the exploration loop\n		for i in xrange(params.p['MAX_ITER']):\n\n			# Execute explore function and save results\n			explore(motor)\n\n			# Wait between moves\n			time.sleep(params.p['WAIT_TIME'])\n	except Exception:\n		pass\n	finally:\n		motor.stop_bot()\n	  \n\n\ndef explore(motor):\n	'''\n		Function will initialize and execute a new \"move\"\n	'''\n\n	# Test output\n	print \"Exploring (moving to a new location) ...\"\n\n	# Beep to indicate begining of explore step\n	buzzer = Buzzer()\n	buzzer.play(5)\n	del buzzer\n\n	# Initialize new move object\n	move = Move()\n\n	# Vector of movement used\n	move = get_move_vector(move)\n\n	# Break down movement vector into motion primitives that robot can execute\n	move.getMotionPlan()\n\n	# Debug print move fields\n	str(move)\n\n	# Execute motion from given move primitives\n	for (direction, amount) in move.primitives:\n		print \"Moving \" + str(direction) + \" \" + str(amount)\n		motor.move_bot(direction, distance=amount, num=params.p['MOTOR_PWR'])\n\n\ndef sample():\n	'''\n		Sample Arduino sensors and return datapoints\n	'''\n	# Set timeout time (2 seconds)\n	timeout = time.time() + params.p['TIMEOUT']\n\n	# Initialize points list and begin loop\n	points = []\n	while len(points) != sensors.numSensor(['HC-SR04', 'TSL2561']):\n\n		# Gather points from serial object\n		points = ser.readline().strip().split(',')\n\n		# If function times out, set points to empty array and break\n		if time.time() > timeout:\n			points = [0] * (sensors.numSensor(['HC-SR04', 'TSL2561']))\n			break\n\n	return points\n\n\ndef readData():\n	print \"Reading data ...\"\n\n	# Create empty data list to store data\n	data = []\n\n	# Populate empty data array\n	for i in xrange(params.p['DATA_SAMPLE_SIZE']):\n		data.append(sample())\n\n	return data\n\n\ndef smoothData(data):\n	print \"Smoothing data ...\"\n\n	# Create empty data array to store smooth data\n	data_smooth = []\n\n	# # Test print\n	# print \"Data: \", data\n\n	# Simple median smoothing\n	for i in xrange(len(data[0])):\n\n		# Make a list of all the different readings from one\n		strip = [int(sample[i]) for sample in data]\n\n		# Add them to data_smooth\n		data_smooth.append(np.median(strip))\n\n	return data_smooth\n\n\ndef get_move_vector(move):\n	'''\n		Performs movement based on gradient direction of sensor readings.\n		Returns vector direction of movement\n	'''\n\n	# Read and Smooth raw data from sensors\n	move.smooth_data = smoothData(readData())\n\n	# Combine readings together using sensor weights\n	for data, sensr in zip(move.smooth_data, sensors.s.iterkeys()):\n\n		# Determine position vector for sensor data (with respect to robot frame)\n		pos_vector = sensors.to_robot(sensr, data)\n\n		# Second element in sensor dictionary entry is sensor weight\n		sensor_weight = sensors.s[sensr][1]\n\n		# Multiply pos readings by sensor weight\n		weighted_vector = np.multiply(sensor_weight, pos_vector).tolist()\n\n		move.weighted_pos_vectors.append(weighted_vector)\n\n		# Debug print statements\n		# print \"sensr, \", sensr\n		# print \"data, \", data\n		# print \"pos_vector, \", pos_vector\n		# print \"sensor_weight, \", sensor_weight\n		# print \"weighted_vector, \", weighted_vector\n\n	# Combine weighted position vectors to get ultimate direction vector\n	move.direction_vector = np.mean(np.array(move.weighted_pos_vectors), axis=0)\n\n	# Return move object\n	return move\n\n# ----------------------------------------------------\n#           MAIN ROBOT SENSE-PLAN-ACT LOOP\n# ----------------------------------------------------\n\nprint \"Starting navigation phase ...\"\n\nnavigate()\n\nprint \"Exited navigation phase ...\"",
			"file": "navigation.py",
			"file_size": 4116,
			"file_write_time": 131074959918977545,
			"settings":
			{
				"buffer_size": 4116,
				"line_ending": "Unix"
			}
		},
		{
			"file": "motor.py",
			"settings":
			{
				"buffer_size": 5063,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Buzzer.py",
			"settings":
			{
				"buffer_size": 3445,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/bigrig/SolarTree"
	],
	"file_history":
	[
		"/home/bigrig/Documents/Programming Questions/Fibonacci.py",
		"/home/bigrig/SolarTree/push.sh",
		"/home/bigrig/SolarTree/brain.py",
		"/home/bigrig/SolarTree/navigation.py",
		"/home/bigrig/SolarTree/SolarTree.sublime-project",
		"/home/bigrig/SolarTree/Area.py",
		"/home/bigrig/Sentinel/src/cv_camera/src/capture.cpp",
		"/home/bigrig/Sentinel/src/sentinel_tracking/src/camera_calibration_raw_output",
		"/home/bigrig/Sentinel/src/sentinel_tracking/src/image_right.png",
		"/home/bigrig/Sentinel/src/sentinel_tracking/CMakeLists.txt",
		"/home/bigrig/Sentinel/src/sentinel_tracking/package.xml",
		"/home/bigrig/Sentinel/src/cv_camera/CMakeLists.txt",
		"/home/bigrig/Sentinel/src/cv_camera/include/cv_camera/capture.h",
		"/home/bigrig/Sentinel/src/cv_camera/src/driver.cpp",
		"/home/bigrig/Sentinel/Sentinel_nodelet.launch"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"object",
			"\n        ",
			"initial",
			"smooth",
			"'''\n",
			"logger",
			"time",
			"type",
			"    \n",
			"\n    ",
			"y.get_param(",
			"opencv",
			"sensor_msgs",
			"node_",
			"bridge_",
			"getCvImage",
			"frame_id",
			"image_width",
			"video2"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"y.get_param(/"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Parameters.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 475,
						"regions":
						{
						},
						"selection":
						[
							[
								324,
								324
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "PinMaster.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 378,
						"regions":
						{
						},
						"selection":
						[
							[
								17,
								17
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Sensor.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3096,
						"regions":
						{
						},
						"selection":
						[
							[
								2589,
								2589
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 969.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Move.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3337,
						"regions":
						{
						},
						"selection":
						[
							[
								190,
								190
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "brain.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3263,
						"regions":
						{
						},
						"selection":
						[
							[
								881,
								881
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "navigation.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4116,
						"regions":
						{
						},
						"selection":
						[
							[
								988,
								988
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 413.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "motor.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5063,
						"regions":
						{
						},
						"selection":
						[
							[
								4315,
								4315
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1377.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Buzzer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3445,
						"regions":
						{
						},
						"selection":
						[
							[
								710,
								710
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "SolarTree.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/SolarTree/SolarTree.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 250.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
